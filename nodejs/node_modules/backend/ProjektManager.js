//require('backend/functions.js');
// creates an unique id
function createUUID() {
    // http://www.ietf.org/rfc/rfc4122.txt
    var s = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < 36; i++) {
           s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    // bits 12-15 of the time_hi_and_version field to 0010
    s[14] = "4";
    // bits 6-7 of the clock_seq_hi_and_reserved to 01  
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    s[8] = s[13] = s[18] = s[23] = "-";

    var uuid = s.join("");
    return uuid;
};
var Projekt = require('backend/Projekt.js');

ProjektManager = function (dbaccess) {
    var _that = this;
    
    var DBAccess = dbaccess;
    var _collectionName = 'projekt';
    
    this.getProjekt = function (params, res, controllerCallback) {
        if (typeof params.projektID == 'string') {
            DBAccess.readDataset(_collectionName, params, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0) {
                    controllerCallback(resultDBAccess[0], res);
                }
                else {
                    controllerCallback('PM: ERROR Projekt not found', res);
                }
            });
        }
        else {
            controllerCallback('PM: ERROR invalid params', res);
        }
    };
    
    this.findProjekts = function (params, res, controllerCallback) {
        // this is stupid, more than that, there is no filter arttribute at any time so have to proof if params has "any" attribute
//        if (params.filterID == undefined) {
            var emptyObj = {};
            DBAccess.readDataset(_collectionName, emptyObj, function (resultDBAccess) {
                controllerCallback(resultDBAccess, res);
            });
//        }
    };
    
    this.createProjekt = function (params, res, controllerCallback) {
        if (typeof params.projektName == 'string') {
            params.projektID = createUUID();
            
            DBAccess.createDataset(_collectionName, params, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined) {
                    if (params.projektID != undefined) {
                        var responseIDParams = {
                            projektID: params.projektID
                        };

                        controllerCallback(responseIDParams, res);
                    }
                    else {
                        controllerCallback('PM: ERROR projektID is undefined after createDataset in createProjekt();', res);
                    }
                }
                else {
                    controllerCallback('PM: ERROR on createDataset in createProjekt();' + resultDBAccess.errorDBAccess, res);
                }
            });
        }
        else {
            controllerCallback('PM: ERROR invalid params', res);
        }
    };
    
    this.removeProjekt = function (params, res, controllerCallback) {
        if (typeof params.projektID == 'string') {
            DBAccess.removeDataset(_collectionName, params, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined) {
                    controllerCallback(resultDBAccess, res);
                }
                else {
                    controllerCallback('PM: ERROR on removeDataset in removeProjekt();' + resultDBAccess.errorDBAccess, res);
                }
            });
        }
        else {
            controllerCallback('PM: ERROR invalid params', res);
        }
    };
};

//check if nodejs is running this code
try {
    module.exports = function () {
        return ProjektManager;
    }();
} catch (e) {

}


