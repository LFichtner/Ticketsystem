var Controller = function (mongodb) {
    var _that = this;
    
    var DBAccess = require('backend/DBAccess.js');
    var SessionManager = require('backend/SessionManager.js');
    var UserManager = require('backend/UserManager.js');
    var TicketManager = require('backend/TicketManager.js');
    var ProjektManager = require('backend/ProjektManager.js');
    var FilterManager = require('backend/FilterManager.js');
    
    var MyDBAccess = new DBAccess(mongodb);
    var MySessionManager = new SessionManager();
    var MyUserManager = new UserManager(MySessionManager, MyDBAccess);
    var MyTicketManager = new TicketManager(MyDBAccess);
    var MyProjektManager = new ProjektManager(MyDBAccess);
    var MyFilterManager = new FilterManager(MyDBAccess);
    
    /*
     * this callback function is reached to every class so the class can
     * reach the control back to this class after the work is done
     * 
     * @param {Object|Array|String} resultObj - an object or an error Message wich is sent back to calling origin
     * @param {Object} response - express response object
     */
    var controllerCallback = function (resultObj, response) {
        
        if (typeof resultObj == 'string' && resultObj.indexOf('ERROR') > -1) {
            console.log(resultObj);
//            console.log('C: all done sending back error message');
//            console.log('<------------------------>');
            
            resultObj = resultObj.substr(resultObj.indexOf('ERROR'));
            console.log(resultObj);
            var errorResultObj = {
                errorMessage: resultObj
            };
            response.send(errorResultObj);
        }
        else if (typeof resultObj == 'object' || typeof resultObj == 'array') {
//            console.log('C: all done sending back result');
//            console.log('C: resultObj: ', resultObj);
//            console.log('<------------------------>');
            var successResultObj = {data: resultObj};
            response.send(successResultObj);
        }
        else {
            var resultType = typeof resultObj;
            console.log('C: ERROR invalid resultObj with type: ', resultType);
            console.log('<------------------------>');
            errorResultObj = {
                errorMessage: 'ERROR invalid result type: ' + resultType + '. Please check the log-files.'
            };    
            response.send(errorResultObj);
        }
    };
    
    /*
     * this class validate the passed parameter and validates for an valid sessionID before the data is passed along
     * it also sends a direct response in case that method is updateSession
     * 
     * @param {Object} data
     * @param {Object} response
     * @param {String} className - name of called class passed from init.js
     */
    this.access = function (data, response, className) {
        console.log('<------------access ' + className + 'Manager------------>');
        console.log('data: ', data);
//        console.log('data.params: ', data.params);
//        console.log('response: ', response);
        console.log('<------------------------>');
        
        if (response) {
            if (data) {
                if (data.sessionID || data.methode.toUpperCase() == 'LOGIN') {
                    if (typeof data.sessionID == 'string' || data.methode.toUpperCase() == 'LOGIN') {
                        var sessionResult = null;
                        if (className.toLowerCase() == 'session' || data.methode.toUpperCase() != 'LOGIN') {
                            sessionResult = MySessionManager.validateSession(data.sessionID);
                        }
                        
                        if (typeof sessionResult == 'string' && (sessionResult == 'SM: ERROR sessionID not found in array' || sessionResult == 'SM: ERROR Session expired')) {
                             controllerCallback('C: ERROR invalid sessionID || ' + sessionResult, response);
                        }
                        else if ((typeof sessionResult == 'boolean' && sessionResult == true) || data.methode.toUpperCase() == 'LOGIN') {
                            // the session call only wants to validate and update the session, cause this already happend return true
                            if (className.toLowerCase() == 'session') {
                                controllerCallback({result: sessionResult}, response);
                            }
                            else if (data.params != undefined /*|| (data.methode.toUpperCase() == 'FIND' && data.params == {})*/) {
                                if (data.methode) {
                                    switch (className.toLowerCase()) {
                                        case 'user':
                                            accessUserManager(data, response);
                                            break;
                                        case 'ticket':
                                            accessTicketManager(data, response);
                                            break;
                                        case 'projekt':
                                            accessProjektManager(data, response);
                                            break;
                                        case 'filter':
                                            accessFilterManager(data, response);
                                            break;
                                    }
                                }
                                else {
                                    controllerCallback('C: ERROR data.methode is undefined or null', response);
                                }
                            }
                            else {
                                controllerCallback('C: ERROR params-Object is not set or empty', response);
                            }
                        }
//                            else if (typeof sessionResult == 'boolean' && sessionResult == false) {
//                                controllerCallback('ERROR Session expired', response);
//                            }
                        else {
                            controllerCallback('C: ERROR invalid sessionID || ' + sessionResult, response);
                        }
                    }
                    else {
                        controllerCallback('C: ERROR sessionID is not a string', response);
                    }
                }
                else {
                    controllerCallback('C: ERROR sessionID is undefined or null', response);
                }
            }
            else {
                controllerCallback('C: ERROR data-Objet is empty or undefined', response);
            }
        }
        else {
            console.log('Fatal ERROR: response-Object is undefined or null');
            console.log(response);
            console.log('<----!!!!!!!!!!!!!---->');
        }
    };
    
    /*
     * passes the data along to the method in data.methode
     * 
     * @param {Object} data
     * @param {Object} response
     */
    var accessUserManager = function (data, response) {
        console.log('C: call methode: ' + data.methode + ' from User');

        switch (data.methode.toUpperCase()) {
            case 'LOGIN':
                MyUserManager.login(data, response, controllerCallback);
                break;
            case 'LOGOUT':
                MyUserManager.logout(data, response, controllerCallback);
                break;
            case 'FIND_HTML':
                MyUserManager.getUsersInTableRows(data, response, controllerCallback);
                break;
            case 'GET':
                MyUserManager.getUser(data, response, controllerCallback);
                break;
            case 'FIND':
                MyUserManager.findUsers(data, response, controllerCallback);
                break;
            case 'CREATE':
                MyUserManager.createUser(data, response, controllerCallback);
                break;
            case 'UPDATE':
                MyUserManager.updateUser(data, response, controllerCallback);
                break;
            case 'REMOVE':
                MyUserManager.removeUser(data, response, controllerCallback);
                break;
            case 'PASSWORD_FORGOTTEN':
                MyUserManager.pwdForgotten(data, response, controllerCallback);
                break;
            default:
                controllerCallback('C: ERROR Methode: ' + data.methode.toUpperCase() + ' not found in accessUserManager()', response);
                break;
        }
    };
    
    /*
     * passes the data along to the method in data.methode
     * 
     * @param {Object} data
     * @param {Object} response
     */
    var accessTicketManager = function (data, response) {
        console.log('C: call methode: ' + data.methode + ' from Ticket');

        var params = data.params;
        
        switch (data.methode.toUpperCase()) {
            case 'FIND_HTML':
                var tempData = {
                    params: {},
                    sessionID: data.sessionID
                };
                MyUserManager.findUsers(tempData, response, function (userResult) {
                    MyProjektManager.findProjekts({}, response, function (projektResult) {
                        data.projekts = projektResult;
                        data.users = userResult;
                        MyTicketManager.getTicketsInTableRows(data, response, controllerCallback);
                    });
                });
                break;
            case 'GET':
                if (data.pretty) {
                    var tempData = {
                        params: {},
                        sessionID: data.sessionID
                    };
                    MyUserManager.findUsers(tempData, response, function (userResult) {
                        MyProjektManager.findProjekts({}, response, function (projektResult) {
                            data.projekts = projektResult;
                            data.users = userResult;
                            MyTicketManager.getTicket(data, response, controllerCallback);
                        });
                    });
                }
                else {
                    MyTicketManager.getTicket(data, response, controllerCallback);
                }
                break;
            case 'FIND':
                if (data.pretty) {
                    var tempData = {
                        params: {},
                        sessionID: data.sessionID
                    };
                    MyUserManager.findUsers(tempData, response, function (userResult) {
                        MyProjektManager.findProjekts({}, response, function (projektResult) {
                            data.projekts = projektResult;
                            data.users = userResult;
                            MyTicketManager.findTickets(data, response, controllerCallback);
                        });
                    });
                }
                else {
                    MyTicketManager.findTickets(data, response, controllerCallback);
                }
                break;
            case 'CREATE':
                var userID = MySessionManager.getUserIDBySessionID(data.sessionID);
                MyTicketManager.createTicket(params, userID, response, controllerCallback);
                break;
            case 'UPDATE':
                MyTicketManager.updateTicket(params, response, controllerCallback);
                break;
            case 'ARCHIV':
                MyTicketManager.archivTicket(params, response, controllerCallback);
                break;
            case 'REMOVE':
                var userID = MySessionManager.getUserIDBySessionID(data.sessionID);
                MyTicketManager.removeTicket(params, userID, response, controllerCallback);
                break;
            default:
                controllerCallback('C: ERROR Methode: ' + data.methode.toUpperCase() + ' not found in accessTicketManager()', response);
                break;
        }
    };
    
    /*
     * passes the data along to the method in data.methode
     * 
     * @param {Object} data
     * @param {Object} response
     */
    var accessProjektManager = function (data, response) {
        console.log('C: call methode: ' + data.methode + ' from Projekt');
        
        var params = data.params;
        
        switch (data.methode.toUpperCase()) {
            case 'GET':
                MyProjektManager.getProjekt(params, response, controllerCallback);
                break;
            case 'FIND':
                MyProjektManager.findProjekts(params, response, controllerCallback);
                break;
            case 'CREATE':
                MyProjektManager.createProjekt(params, response, controllerCallback);
                break;
            case 'REMOVE':
                MyProjektManager.removeProjekt(params, response, controllerCallback);
                break;
            default:
                controllerCallback('C: ERROR Methode: ' + data.methode.toUpperCase() + ' not found in accessProjektManager()', response);
                break;
        }
    };
    
    /*
     * passes the data along to the method in data.methode
     * 
     * @param {Object} data
     * @param {Object} response
     */
    var accessFilterManager = function (data, response) {
        console.log('C: call methode: ' + data.methode + ' from Filter');
        
        var params = data.params;
        
        switch (data.methode.toUpperCase()) {
            case 'FIND_HTML':
                MyFilterManager.getFiltersAsButtons(params, response, controllerCallback);
                break;
            case 'GET':
                MyFilterManager.getFilter(params, response, controllerCallback);
                break;
            case 'FIND':
                MyFilterManager.findFilters(params, response, controllerCallback);
                break;
            case 'CREATE':
                MyFilterManager.createFilter(params, response, controllerCallback);
                break;
            case 'UPDATE':
                MyFilterManager.updateFilter(params, response, controllerCallback);
                break;
            case 'REMOVE':
                MyFilterManager.removeFilter(params, response, controllerCallback);
                break;
            controllerCallback('C: ERROR Methode: ' + data.methode.toUpperCase() + ' not found in accessFilterManager()', response);
        }
    };
};

//check if nodejs is running this code
try {
    module.exports = function () {
        return Controller;
    }();
} catch (e) {

}