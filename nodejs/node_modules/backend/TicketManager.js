//require('backend/functions.js');
// creates an unique id
function createUUID() {
    // http://www.ietf.org/rfc/rfc4122.txt
    var s = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < 36; i++) {
           s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    // bits 12-15 of the time_hi_and_version field to 0010
    s[14] = "4";
    // bits 6-7 of the clock_seq_hi_and_reserved to 01  
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    s[8] = s[13] = s[18] = s[23] = "-";

    var uuid = s.join("");
    return uuid;
};
var Ticket = require('backend/Ticket.js');

TicketManager = function (dbaccess) {
    var _that = this;
    
    var DBAccess = dbaccess;
    var _collectionName = 'ticket';
    var _filterCollectionName = 'filter';
    var _userCollectionName = 'user';
    var _projektCollectionName = 'projekt';
    
    this.getTicketsInTableRows = function (data, res, controllerCallback) {
        data.pretty = true;
        _that.findTickets(data, res, function (resultDBAccess, res) {
//            console.log('resultDBAccess: ', resultDBAccess)
            if (resultDBAccess && resultDBAccess.errorDBAccess == undefined/*??*/) {//proof for (MongoDB)error
                var htmlStrings = [];
                for (var i = 0; i < resultDBAccess.length; i++) {
                    htmlStrings[i] = '<tr id="' + resultDBAccess[i]._id + '"><td>' + resultDBAccess[i].ticketTitle + '</td><td>' + resultDBAccess[i].ticketDescription + '</td><td>' + resultDBAccess[i].ticketType + '</td><td>' + resultDBAccess[i].ticketPriority + '</td><td>' + resultDBAccess[i].ticketDueDate + '</td><td>' + resultDBAccess[i].ticketProjektName + '</td><td>' + resultDBAccess[i].ticketUserName + '</td><td>' + resultDBAccess[i].ticketInProgress + '</td><td>' + resultDBAccess[i].ticketCreatedByName + '</td><td>' + resultDBAccess[i].ticketCreationDate + '</td></tr>'; 
                }

                controllerCallback(htmlStrings, res);
            }
            else {
                controllerCallback('TM: ERROR Tickets not found', res);
            }
        });
    };
    
    var prettifyFindResult = function (resultDBAccess, data, res, controllerCallback) {
//        console.log('<=============================prettify=====================================>');
        var userIDAndNameObject = {};
        var projektIDAndNameObject = {};
        for (var i = 0; i < data.users.length; i++) {
            userIDAndNameObject[data.users[i]._id] = data.users[i].userName;
        }
        for (var i = 0; i < data.projekts.length; i++) {
            projektIDAndNameObject[data.projekts[i]._id] = data.projekts[i].projektName;
        }
//        console.log('typeof resultDBAccess: ', typeof resultDBAccess, '   length: ',resultDBAccess.length)
        if (resultDBAccess.length > 0) {
            for (var i = 0; i < resultDBAccess.length; i++) {
                if (userIDAndNameObject[resultDBAccess[i].ticketUserID]) {
                    resultDBAccess[i].ticketUserName = userIDAndNameObject[resultDBAccess[i].ticketUserID];
                }
                else {
                    console.log('error on prettifing result(user). cant find name to: ', resultDBAccess[i].ticketUserID);
                }

                if (userIDAndNameObject[resultDBAccess[i].ticketCreatedBy]) {
                    resultDBAccess[i].ticketCreatedByName = userIDAndNameObject[resultDBAccess[i].ticketCreatedBy];
                }
                else {
                    console.log('error on prettifing result(createdBy). cant find name to: ', resultDBAccess[i].ticketCreatedBy);
                }

                if (projektIDAndNameObject[resultDBAccess[i].ticketProjektID]) {
                    resultDBAccess[i].ticketProjektName = projektIDAndNameObject[resultDBAccess[i].ticketProjektID];
                }
                else {
                    console.log('error on prettifing result(projekt). cant find name to: ', resultDBAccess[i].ticketProjektID);
                }
            }
        }
        else {
            if (userIDAndNameObject[resultDBAccess.ticketUserID]) {
                resultDBAccess.ticketUserName = userIDAndNameObject[resultDBAccess.ticketUserID];
            }
            else {
                console.log('error on prettifing result(user). cant find name to: ', resultDBAccess.ticketUserID);
            }

            if (userIDAndNameObject[resultDBAccess.ticketCreatedBy]) {
                resultDBAccess.ticketCreatedByName = userIDAndNameObject[resultDBAccess.ticketCreatedBy];
            }
            else {
                console.log('error on prettifing result(createdBy). cant find name to: ', resultDBAccess.ticketCreatedBy);
            }

            if (projektIDAndNameObject[resultDBAccess.ticketProjektID]) {
                resultDBAccess.ticketProjektName = projektIDAndNameObject[resultDBAccess.ticketProjektID];
            }
            else {
                console.log('error on prettifing result(projekt). cant find name to: ', resultDBAccess.ticketProjektID);
            }
        }
        
        controllerCallback(resultDBAccess, res);
    };
    
    this.setTicketOnActive = function () {
        
    };
    
    this.getTicket = function (data, res, controllerCallback) {
        var params = data.params;
        if (typeof params.ticketID == 'string') {
            DBAccess.readDataset(_collectionName, params, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0) {
                    if (data.pretty) {
                        prettifyFindResult(resultDBAccess[0], data, res, controllerCallback);
                    }
                    else {
                        controllerCallback(resultDBAccess[0], res);
                    }
                }
                else {
                    controllerCallback('TM: ERROR Ticket not found', res);
                }
            });
        }
        else {
            controllerCallback('TM: ERROR invalid params', res);
        }
    };

    this.findTickets = function (data, res, controllerCallback) {
        var params = data.params;
        // TODO proof for empty params-object
        if (typeof params.filterID == 'string') {
            var filterIDParams = {
                filterID: params.filterID
            };
            
            DBAccess.readDataset(_filterCollectionName, filterIDParams, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0) {
                    // TODO (very important) for god´s sake don´t reach the pwd
                    // name of attribute has to be the fieldName and Value is the searched value
                    var trimmedParams = {};
                    trimmedParams[resultDBAccess[0].filterFieldName] = resultDBAccess[0].filterValue;

                    if (resultDBAccess[0].filterFunction == 'include') {
                        DBAccess.readDataset(_collectionName, trimmedParams, function (resultDBAccess) {
                            if (data.pretty) {
                                prettifyFindResult(resultDBAccess, data, res, controllerCallback);
                            }
                            else {
                                controllerCallback(resultDBAccess, res);
                            }
                        });
                    }
                    else if (resultDBAccess[0].filterFunction == 'exclude') {
                        DBAccess.readDataset(_collectionName, trimmedParams, function (resultDBAccess) {
                            if (data.pretty) {
                                prettifyFindResult(resultDBAccess, data, res, controllerCallback);
                            }
                            else {
                                controllerCallback(resultDBAccess, res);
                            }
                        }, true);
                    }
                }
                else {
                    controllerCallback('TM: ERROR Filter not found on findTickets()', res);
                }
            });
        }
        else {
            var emptyObj = {};
            DBAccess.readDataset(_collectionName, emptyObj, function (resultDBAccess) {
                if (data.pretty) {
                    prettifyFindResult(resultDBAccess, data, res, controllerCallback);
                }
                else {
                    controllerCallback(resultDBAccess, res);
                }
            });
        }
    };
    
    this.createTicket = function (params, userID, res, controllerCallback) {
        if (typeof params.ticketTitle == 'string' && typeof params.ticketDescription == 'string' && typeof params.ticketType == 'string' && typeof params.ticketPriority == 'string' && typeof params.ticketDueDate == 'string' && typeof params.ticketProjektID == 'string' && typeof params.ticketUserID == 'string') {
            // ticketUserID have to exist in DB to assign it on a ticket
            console.log('params.ticketUserID: ', params.ticketUserID);
            var ticketUserIDParams = {userID: params.ticketUserID};
            DBAccess.readDataset(_userCollectionName, ticketUserIDParams, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined) {
                    if (resultDBAccess.length > 0 && resultDBAccess[0]._id != undefined) {
                        // ticketProjektID have to exist in DB to assign it on a ticket
                        var ticketProjektIDParams = {projektID: params.ticketProjektID};
                        DBAccess.readDataset(_projektCollectionName, ticketProjektIDParams, function (resultDBAccess) {
                            if (resultDBAccess.errorDBAccess == undefined) {
                                if (resultDBAccess.length > 0 && resultDBAccess[0]._id != undefined) {
                                    params.ticketID = createUUID();
            
                                    var today = new Date();
                                    params.ticketCreationDate = ('d.m.y').replace('y', today.getFullYear()).replace('m', today.getMonth()+1).replace('d', today.getDate());
                                    console.log(params.ticketCreationDate);

                                    params.ticketCreatedBy = userID;

                                    DBAccess.createDataset(_collectionName, params, function (resultDBAccess) {
                                        if (resultDBAccess.errorDBAccess == undefined) {
                                            if (params.ticketID != undefined) {
                                                var responseIDParams = {
                                                    ticketID: params.ticketID
                                                };

                                                controllerCallback(responseIDParams, res);
                                            }
                                            else {
                                                controllerCallback('TM: ERROR ticketID is undefined after createDataset in createTicket();', res);
                                            }
                                        }
                                        else {
                                            controllerCallback('TM: ERROR on createDataset in createTicket();' + resultDBAccess.errorDBAccess, res);
                                        }
                                    });
                                }
                                else {
                                    controllerCallback('TM: ERROR selected projekt not found in projekt table', res);
                                }
                            }
                            else {
                                controllerCallback('TM: ERROR on readDataset in createTicket();' + resultDBAccess.errorDBAccess, res);
                            }
                        });
                    }
                    else {
                        controllerCallback('TM: ERROR selected user not found in user table', res);
                    }
                }
                else {
                    controllerCallback('TM: ERROR on readDataset in createTicket();' + resultDBAccess.errorDBAccess, res);
                }
            });
        }
        else {
            controllerCallback('TM: ERROR invalid params', res);
        }
    };
    
    this.updateTicket = function (params, res, controllerCallback) {
        if (typeof params.ticketID == 'string') {
            DBAccess.updateDataset(_collectionName, params, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined) {
                    controllerCallback(resultDBAccess, res);
                }
                else {
                    controllerCallback('TM: ERROR on updateDataset in updateTicket();' + resultDBAccess.errorDBAccess, res);
                }
            });
        }
        else {
            controllerCallback('TM: ERROR invalid params', res);
        }
    };
    
    // TODO archive-function have to change archived attribute to true
    this.archivTicket = function (params, res, controllerCallback) {
        if (typeof params.ticketID == 'string') {
          
        }
        else {
            controllerCallback('TM: ERROR invalid params', res);
        }
    };
    
    // TODO function to get userID is located in Controller.js
    this.removeTicket = function (params, userID, res, controllerCallback) {
        var userIDParams = {userID: userID};
        
        DBAccess.readDataset(_userCollectionName, userIDParams, function (resultDBAccess) {
            if (resultDBAccess[0].userPermission == true) {
                if (typeof params.ticketID == 'string') {
                    DBAccess.removeDataset(_collectionName, params, function (resultDBAccess) {
                        if (resultDBAccess.errorDBAccess == undefined) {
                            controllerCallback(resultDBAccess, res);
                        }
                        else {
                            controllerCallback('TM: ERROR on removeDataset in removeTicket();' + resultDBAccess.errorDBAccess, res);
                        }
                    });
                }
                else {
                    controllerCallback('TM: ERROR invalid params', res);
                }
            }
            else {
                controllerCallback('TM: ERROR insufficient permission', res);
            }
        });
    };
};

//check if nodejs is running this code
try {
    module.exports = function () {
        return TicketManager;
    }();
} catch (e) {

}