//require('backend/functions.js');
// creates an unique id
function createUUID() {
    // http://www.ietf.org/rfc/rfc4122.txt
    var s = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < 36; i++) {
           s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    // bits 12-15 of the time_hi_and_version field to 0010
    s[14] = "4";
    // bits 6-7 of the clock_seq_hi_and_reserved to 01  
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    s[8] = s[13] = s[18] = s[23] = "-";

    var uuid = s.join("");
    return uuid;
};
var User = require('backend/User.js');

UserManager = function (sessionmanager, dbaccess) {
    var _that = this;
    
    var DBAccess = dbaccess;
    var SessionManager = sessionmanager;
    
    var _collectionName = 'user';
    var _filterCollectionName = 'filter';
    
    var hashPassword = function (password) {
        return password;
    };

    this.login = function (data, res, controllerCallback) {
        var params = data.params;
        var userID;
        
//        console.log('typeof params.userName, typeof params.userPassword', typeof params.userName, typeof params.userPassword);
        if (typeof params.userName == 'string' && typeof params.userPassword == 'string') {
            params.userPassword = hashPassword(params.userPassword);

            DBAccess.readDataset(_collectionName, params, function (resultDBAccess) {
//                console.log('UM: login-read-params:', params, '--->');
//                console.log('UM: login-read-result:', resultDBAccess, '--->');
                if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0 && resultDBAccess[0]._id != undefined) {
                    userID = resultDBAccess[0]._id;
                    if (SessionManager.getSessionIDByUserID(userID) == false) {
                        var sessionID = SessionManager.createSession(userID);
                        if (sessionID && typeof sessionID == 'string') {
                            controllerCallback({sessionID: sessionID, userID: userID, userPermission: resultDBAccess[0].userPermission}, res);
                        }
                        else {
                            controllerCallback('UM: ERROR invalid sessionID', res);
                        }
                    }
                    else {
                        controllerCallback('UM: ERROR User already logged in', res);
                    }
                }
                else {
                    controllerCallback('UM: ERROR User not found', res);
                }
            });
        }
        else {
            controllerCallback('UM: ERROR invalid params', res);
        }
    };
    
    this.logout = function (data, res, controllerCallback) {
//        var params = data.params;
        
        var sessionResult = SessionManager.removeSession(data.sessionID);
        if (sessionResult == true) {
            var resultObj = {
                result: true
            };
            
            controllerCallback(resultObj, res);
        }
        else {
            controllerCallback(sessionResult, res);
        }
    };
    
    this.getUsersInTableRows = function (data, res, controllerCallback) {
        _that.findUsers(data, res, function (resultDBAccess, res) {
            if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0) {
                var htmlStrings = [];
                
                for (var i = 0; i < resultDBAccess.length; i++) {
                    htmlStrings[i] = '<tr id="' + resultDBAccess[i]._id + '"><td>' + resultDBAccess[i].userName + '</td><td>' + resultDBAccess[i].userFirstName + '</td><td>' + resultDBAccess[i].userLastName + '</td><td>' + resultDBAccess[i].userPermission + '</td><td>' + resultDBAccess[i].userMail + '</td></tr>'; 
                }
                
                controllerCallback(htmlStrings, res);
            }
            else {
                controllerCallback('UM: ERROR User not found', res);
            }
        });
    };
    
    this.getUser = function (data, res, controllerCallback) {
        var userID = SessionManager.getUserIDBySessionID(data.sessionID);
        var userIDParams = {userID: userID};
        
        var params = data.params;
        
        DBAccess.readDataset(_collectionName, userIDParams, function (resultDBAccess) {
            if (resultDBAccess.errorDBAccess == undefined && resultDBAccess[0].userPermission == true) {
//                console.log(params);
                if (typeof params.userID == 'string') {
                    var trimmedParams = {
                        userID: params.userID
                    };
                    
//                    console.log('localParams: ', trimmedParams);
                    DBAccess.readDataset(_collectionName, params, function (resultDBAccess) {
                        if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0) {
                            delete resultDBAccess[0].userPassword;
                            controllerCallback(resultDBAccess[0], res);
                        }
                        else {
                            controllerCallback('UM: ERROR User not found', res);
                        }
                    });
                }
                else {
                    controllerCallback('UM: ERROR invalid params', res);
                }
            }
            else {
                controllerCallback('UM: ERROR insufficient permission', res);
            }
        });
    };
    
    // TODO
    this.findUsers = function (data, res, controllerCallback) {
        var userID = SessionManager.getUserIDBySessionID(data.sessionID);
        var userIDParams = {userID: userID};
        
        var params = data.params;
    
        DBAccess.readDataset(_collectionName, userIDParams, function (resultDBAccess) {
            if (resultDBAccess.errorDBAccess == undefined && resultDBAccess[0].userPermission == true) {
                if (params.filterID == undefined) {
                    var emptyObj = {};
                    DBAccess.readDataset(_collectionName, emptyObj, function (resultDBAccess) {
                        if (resultDBAccess != undefined && resultDBAccess.length > 0) {
                            for (var i = 0; i < resultDBAccess.length; i++) {
                                delete resultDBAccess[i].userPassword;
                            }
                            controllerCallback(resultDBAccess, res);
                        }
                        else {
                            controllerCallback('UM: ERROR no Users found' + resultDBAccess.errorDBAccess, res);
                        }
                    });
                }
                else if (typeof params.filterID == 'string') {
                    var filterIDParams = {
                        filterID: params.filterID
                    };

                    DBAccess.readDataset(_filterCollectionName, filterIDParams, function (resultDBAccess) {
                        if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0) {
                            // TODO (very important) for god´s sake don´t reach the pwd
                            // name of attribute has to be the fieldName and Value is the searched value
                            var trimmedParams = {};
                            trimmedParams[resultDBAccess[0].filterFieldName] = resultDBAccess[0].filterValue;

                            if (resultDBAccess[0].filterFunction == 'include') {
                                DBAccess.readDataset(_collectionName, trimmedParams, function (resultDBAccess) {
                                    if (resultDBAccess != undefined && resultDBAccess.length > 0) {
                                        for (var i = 0; i < resultDBAccess.length; i++) {
                                            delete resultDBAccess[i].userPassword;
                                        }
                                        controllerCallback(resultDBAccess, res);
                                    }
                                    else {
                                        controllerCallback('UM: ERROR no Users matching that filter' + resultDBAccess.errorDBAccess, res);
                                    }
                                });
                            }
                            else if (resultDBAccess[0].filterFunction == 'exclude') {
                                controllerCallback('UM: ERROR at the Moment there are no exclude function for findUsers() please remove the filter', res);
                            }
                        }
                        else {
                            controllerCallback('UM: ERROR Filter not found', res);
                        }
                    });
                }
                else {
                    controllerCallback('UM: ERROR ID not set or not a string and params not empty', res);
                }
            }
            else {
                controllerCallback('UM: ERROR insufficient permission', res);
            }
        });
    };
    
    this.createUser = function (data, res, controllerCallback) {
        var userID = SessionManager.getUserIDBySessionID(data.sessionID);
        var userIDParams = {userID: userID};
        
//        console.log('get userID: ', userID, 'with following sessionID: ', data.sessionID);
        
        var params = data.params;
        
        DBAccess.readDataset(_collectionName, userIDParams, function (resultDBAccess) {
            if (resultDBAccess.errorDBAccess == undefined && resultDBAccess.length > 0) {
//                console.log('resultDBAccess: ', resultDBAccess);
//                console.log('resultDBAccess[0}.permission: ', resultDBAccess[0].userPermission, 'userName: ', resultDBAccess[0].userName);
                if (resultDBAccess[0].userPermission == true) {
                    params.userPassword = hashPassword(params.userPassword);

                    if (typeof params.userName == 'string' && typeof params.userPassword == 'string' && typeof params.userFirstName == 'string' && typeof params.userLastName == 'string' && typeof params.userMail == 'string' && typeof params.userPermission == 'boolean') {
                        var userNameParams = {userName: params.userName};
                        DBAccess.readDataset(_collectionName, userNameParams, function(resultDBAccess) {
                            // resultDBAccess is either true or an error message  is this correct????
                            if (resultDBAccess.errorDBAccess == undefined) {
                                if (resultDBAccess.length <= 0) {
                                    params.userID = createUUID();
                                    console.log('<====== userID before createDataset(): ', params.userID, '========>');
                                    DBAccess.createDataset(_collectionName, params, function (resultDBAccess) {
                                        console.log('<====== _id after createDataset(): ', params._id, '========>');
                                        if (resultDBAccess.errorDBAccess == undefined) {
                                            if (params.userID != undefined) {
                                                var responseIDParams = {
                                                    userID: params.userID
                                                };
                                                
                                                controllerCallback(responseIDParams, res);
                                            }
                                            else {
                                                controllerCallback('UM: ERROR userID is undefined after createDataset in createUser();', res);
                                            }
                                        }
                                        else {
                                            controllerCallback('UM: ERROR on createDataset in createUser();' + resultDBAccess.errorDBAccess, res);
                                        }
                                    });
                                }
                                else {
                                    controllerCallback('UM: ERROR username already exist', res);
                                }
                            }
                            else {
                                controllerCallback('UM: ERROR on readDataset in createUser();' + resultDBAccess.errorDBAccess, res);
                            }

                        });
                    }
                    else {
                        controllerCallback('UM: ERROR invalid params', res);
                    }
                }
                else {
                    controllerCallback('UM: ERROR insufficient permission', res);
                }
            }
            else {
                controllerCallback('UM: ERROR User not found', res);
            }
        });
    };
    
    
    // TODO upadte code updateUser function is already updated!?!
    this.updateUser = function (data, res, controllerCallback) {
        var params = data.params;
        if (params.userPassword) {
            params.userPassword = hashPassword(params.userPassword);    
        }
        
        if (/*data.process == undefined || */data.process.toLowerCase() == 'update') {
            var userID = SessionManager.getUserIDBySessionID(data.sessionID);
            var userIDParams = {userID: userID};

            DBAccess.readDataset(_collectionName, userIDParams, function (resultDBAccess) {
                if (resultDBAccess.errorDBAccess == undefined && resultDBAccess[0].userPermission == true) {
                    if (typeof params.userID == 'string') {
                        DBAccess.updateDataset(_collectionName, params, function (resultDBAccess) {
                            if (resultDBAccess.errorDBAccess == undefined) {
                                controllerCallback(resultDBAccess, res);
                            }
                            else {
                                controllerCallback('UM: ERROR on updateDataset in updateUser();' + resultDBAccess.errorDBAccess, res);
                            }
                        });
                    }
                    else {
                        controllerCallback('UM: ERROR invalid params', res);
                    }
                }
                else {
                    controllerCallback('UM: ERROR insufficient permission', res);
                }
            });
        }
        else if (data.process.toLowerCase() == 'changepwd') {
            if (typeof params.userPassword == 'string' && typeof params.userID == 'string') {
                // simplest way to ensure that only this two parameters are passed(change later)
                var trimmedParams = {
                    userID: params.userID,
                    password: params.userPassword
                };
                DBAccess.updateDataset(_collectionName, trimmedParams, function (resultDBAccess) {
                    if (resultDBAccess.errorDBAccess == undefined) {
                        controllerCallback(resultDBAccess, res);
                    }
                    else {
                        controllerCallback('UM: ERROR on updateDataset in updateUser();' + resultDBAccess.errorDBAccess, res);
                    }
                });
            }
            else {
                controllerCallback('UM: ERROR invalid params', res);
            }
        }
    };
    
    this.removeUser = function (data, res, controllerCallback) {
        var userID = SessionManager.getUserIDBySessionID(data.sessionID);
        var userIDParams = {userID: userID};
        
        var params = data.params;
        
        DBAccess.readDataset(_collectionName, userIDParams, function (resultDBAccess) {
            if (resultDBAccess.errorDBAccess == undefined && resultDBAccess[0].userPermission == true) {
                if (typeof params.userID == 'string') {
                    DBAccess.removeDataset(_collectionName, params, function (resultDBAccess) {
                        if (resultDBAccess.errorDBAccess == undefined) {
                            controllerCallback(resultDBAccess, res);
                        }
                        else {
                            controllerCallback('UM: ERROR on removeDataset in removeUser();' + resultDBAccess.errorDBAccess, res);
                        }
                    });
                }
                else {
                    controllerCallback('UM: ERROR invalid params', res);
                }
            }
            else {
                controllerCallback('UM: ERROR insufficient permission', res);
            }
        });
    };
    
    var pwdForgotten = function (userID) {
        // 1.send mail with link on saved userMailAddress
        // 2.if user clicks on link redirect to page and pass crendentials
        // 3.if user hits submit send new password and userID back and validate
        // 4.call updateUser with ID and password
        // -both sould be handeld in this function
    };
};

//check if nodejs is running this code
try {
    module.exports = function () {
        return UserManager;
    }();
} catch (e) {

}