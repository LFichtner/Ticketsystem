//require('../functions.js');
//require('testData.js');

/*temp please incule trough require*/
// creates an unique id
function createUUID() {
    // http://www.ietf.org/rfc/rfc4122.txt
    var s = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < 36; i++) {
           s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    // bits 12-15 of the time_hi_and_version field to 0010
    s[14] = "4";
    // bits 6-7 of the clock_seq_hi_and_reserved to 01  
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    s[8] = s[13] = s[18] = s[23] = "-";

    var uuid = s.join("");
    return uuid;
};

var testDataUsers = [
    {
        userID: createUUID(),
        userName: 'lasse',
        userPassword: 'pwd4lasse',
        userFirstName: 'lasse',
        userLastName: 'fichtner',
        userPermission: true,
        userMail: 'lasse-95@gmx.de'
    },
    {
        userID: createUUID(),
        userName: 'userTicketTest',
        userPassword: '1234',
        userFirstName: 'l',
        userLastName: 'fichtner',
        userPermission: false,
        userMail: 'notAMail'
    },
    {
        userID: createUUID(),
        userName: 'testUser',
        userPassword: '1234',
        userFirstName: 'lasse',
        userLastName: 'F.',
        userPermission: false,
        userMail: 'test@gmx.de'
    },
    {
        userID: createUUID(),
        userName: 'permissionFilterTest',
        userPassword: '1234',
        userFirstName: 'filter',
        userLastName: 'forPermission',
        userPermission: true,
        userMail: 'permission@gmx.de'
    }
];

var testDataProjekts = [
    {
        projektID: createUUID(),
        projektName: 'Aufgabenverwaltung'
    },
    {
        projektID: createUUID(),
        projektName: 'MYKENE3'
    }
];

var testDataTickets = [
    {
        ticketID: createUUID(),
        ticketTitle: 'testTicket',
        ticketDescription: 'ticketForTesting',
        ticketType: 'Task',
        ticketPriority: 2,
        ticketDueDate: '29.06.2016',
        ticketProjektID: testDataProjekts[0].projektID,
        ticketUserID: testDataUsers[1].userID,
        ticketCreatedBy: testDataUsers[0].userID,
        ticketCreationDate: '14.06.2016',
        ticketInProgress: true
    },
    {
        ticketID: createUUID(),
        ticketTitle: 'testFilterTest',
        ticketDescription: 'a ticket to test Filter funktionality',
        ticketType: 'Bug',
        ticketPriority: 2,
        ticketDueDate: '29.01.2017',
        ticketProjektID: testDataProjekts[0].projektID,
        ticketUserID: testDataUsers[1].userID,
        ticketCreatedBy: testDataUsers[0].userID,
        ticketCreationDate: '14.06.2016',
        ticketInProgress: false
    },
    {
        ticketID: createUUID(),
        ticketTitle: 'testFilterTest2',
        ticketDescription: 'second for filter testing',
        ticketType: 'Bug',
        ticketPriority: 2,
        ticketDueDate: '24.06.2016',
        ticketProjektID: testDataProjekts[1].projektID,
        ticketUserID: testDataUsers[1].userID,
        ticketCreatedBy: testDataUsers[0].userID,
        ticketCreationDate: '14.06.2016',
        ticketInProgress: false
    },
    {
        ticketID: createUUID(),
        ticketTitle: 'justAnotherTestTicket',
        ticketDescription: 'justAnotherTestTicket',
        ticketType: 'Feature',
        ticketPriority: 1,
        ticketDueDate: '02.06.2016',
        ticketProjektID: testDataProjekts[1].projektID,
        ticketUserID: testDataUsers[2].userID,
        ticketCreatedBy: testDataUsers[1].userID,
        ticketCreationDate: '14.06.2016',
        ticketInProgress: false
    }
];

var testDataFilters = [
    {
        filterID: createUUID(),
        filterFieldName: 'userPermission',
        filterFunction: 'include',
        filterValue: true
    },
    {
        filterID: createUUID(),
        filterFieldName: 'userPermission',
        filterFunction: 'include',
        filterValue: false
    },
    {
        filterID: createUUID(),
        filterFieldName: 'ticketType',
        filterFunction: 'include',
        filterValue: 'Bug'
    },
    {
        filterID: createUUID(),
        filterFieldName: 'ticketType',
        filterFunction: 'exclude',
        filterValue: 'Bug'
    }
];
/**/

var testScenarios = function () {
    var _that = this;
    var Server_URL = 'http://127.0.0.1:3000/';
    var URL_Suffixs = ['updateSession', 'userManager', 'ticketManager', 'projektManager', 'filterManager'];
    
    var trowResult = function (result, testName, data, callback) {
        var methodeName = null;
        if (data != undefined) {
            if (data.methode != undefined) {
                methodeName = data.methode;
            }
        }
        
        var functionName;
        if (!testName || !methodeName) {
            functionName = '"not set"';
        }
        else {
            functionName = testName + '|' + methodeName;
        }

        if (result.errorMessage == undefined) {
            console.info('Success on ' + functionName + ' with following result: ', result.data);
            if (callback) {
                callback();
            }
        }
        else {
            console.error('Error on ' + functionName + ' with following message: ', result.errorMessage);
            $('#testProtokoll .errorOutput').append('<span>' + result.errorMessage + ';</span>');
        }
    };
    
    var sendAjax = function (dataObj, URL_Suffix, callback) {
        $.ajax({
            type: 'post',
            url: Server_URL + URL_Suffix,
            data: JSON.stringify(dataObj),
//            dataType: 'json',
            contentType: 'application/json',
            error: function (x, s, t) {
                console.error('jquery-ajax-error: ' + s + '\n' + t);
            },
            success: function (result) {
//                console.log('<------ajax success handler------>');
//                console.log('typeof result: ', typeof result);
                if (typeof result == 'string') {
                    result = JSON.parse(result);
                } 
//                console.log(result);
//                console.log('<------exit------>');
                callback(result);
            }
        });
    };
    
    var login = function (testName, callback) {
        var username = 'lasse';
        var password = 'pwd4lasse';
        
        var data = {
            params: {
                userName: username,
                userPassword: password
            },
            methode: 'login'
        };
        // send ajax with login-request
        sendAjax(data, URL_Suffixs[1], function (result) {
            // only in success case call next function
            trowResult(result, testName, data, function () {
                if (callback != undefined) {
                    callback(result);
                }
            });
        });
    };
    
    var logout = function (sessionID, testName, callback) {
        var data = {
            params: {},
            methode: 'logout',
            sessionID: sessionID
        };
        // send ajax with login-request
        sendAjax(data, URL_Suffixs[1], function (logoutResult) {
            // only in success case call next function
            trowResult(logoutResult, testName, data, function () {
                if (callback != undefined) {
                    callback(logoutResult);
                }
            });
        });
    };
    
    // set db to a default state (and get address)
    this.initTesting = function (callback) {
        var users = testDataUsers;
        var tickets = testDataTickets;
        var filters = testDataFilters;
        var projekts = testDataProjekts;
        
        
        
        // count of tickets matching third filter
        var filteredTicketCount = 2;
        // count of users matching first filter
        var filteredUserCount = 2;
        
        var initTestDataResultObj = {
            data: {
                userCount: users.length,
                filteredUserCount: filteredUserCount,
                filterIDUser: filters[0].filterID,
                ticketCount: tickets.length,
                filteredTicketCount: filteredTicketCount,
                filterIDTicket: filters[2].filterID,
                ticketProjektID: projekts[0].projektID,
                ticketUserID: users[1].userID
            }
        };
        
        var data = {
            params: {
                users: users,
                tickets: tickets,
                filters: filters,
                projekts: projekts
            },
            password: 'x43f65ld23io1d00se234fgt642',
            initTestDataResultObj: initTestDataResultObj
        };
        
        sendAjax(data, 'initProjektTesting', function (result) {
            if (result.errorMessage == undefined) {
                callback(result);
            }
            else {
                callback(false);
            }
        });
    };
    
    // test login, validateSession and logout also a login and validateSession with false data
    this.testSessionverwaltung = function (callback) {
        var testName = 'testSessionverwaltung';
        var sessionID = '';
        

        login(testName, function(result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                sessionID: sessionID
            };
            sendAjax(data, URL_Suffixs[0], function (result) {
                trowResult(result, testName, data, function () {
                    // call logout function
                    logout(sessionID, testName, function () {
                        var data = {
                            params: {
                                userName: 'lasseFalseAccess',
                                userPassword: 'pwd4lasse'
                            },
                            methode: 'login'
                        };
                        sendAjax(data, URL_Suffixs[1], function (result) {
                            trowResult(result, testName, data);
                            if (result.errorMessage) {
                                var data = {
                                    sessionID: createUUID()
                                };
                                sendAjax(data, URL_Suffixs[0], function (result) {
                                    trowResult(result, testName, data);
                                    // everythings went well send callback
                                    if (result.errorMessage != undefined) {
                                        callback(true);
                                    }
                                    else {
                                        callback(false);
                                    }
                                });
                            }
                        });
                    }); 
                });
            });
        });
    };
    
    // test createUser, updateUser, getUser, removeUser, getUser again too proof removal
    this.testUsermanagement = function (callback) {
        var testName = 'testUsermanagement';
        var sessionID = '';
        var userID = '';
        var userFirstNameTestValue = 'lasseUpdateTest';
        
        login(testName, function (result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                params: {
                    userName: 'lasseTest',
                    userPassword: 'pwd4lasseTest',
                    userFirstName: 'lasse',
                    userLastName: 'Fichtner',
                    userPermission: false,
                    userMail: 'test@gmail.com'
                },
                methode: 'create',
                sessionID: sessionID
            };
            sendAjax(data, URL_Suffixs[1], function (result) {
                trowResult(result, testName, data, function () {
                    userID = result.data.userID;
                    var data = {
                        params: {
                            userID: userID,
                            userFirstName: userFirstNameTestValue,
                            userPermission: true
                        },
                        methode: 'update',
                        process: 'update',
                        sessionID: sessionID
                    };
                    sendAjax(data, URL_Suffixs[1], function (result) {
                        trowResult(result, testName, data, function () {
                            var data = {
                                params: {
                                    userID: userID
                                },
                                methode: 'get',
                                sessionID: sessionID
                            };
                            sendAjax(data, URL_Suffixs[1], function (result) {
                                trowResult(result, testName, data, function() {
                                    if (result.data.userFirstName == userFirstNameTestValue && result.data.userPermission == true) {
                                        console.info('update successful: ' + userID);
                                        var data = {
                                            params: {
                                                userID: userID
                                            },
                                            methode: 'remove',
                                            sessionID: sessionID
                                        };
                                        sendAjax(data, URL_Suffixs[1], function (result) {
                                            trowResult(result, testName, data, function () {
                                                var data = {
                                                    params: {
                                                        userID: userID
                                                    },
                                                    methode: 'get',
                                                    sessionID: sessionID
                                                };
                                                sendAjax(data, URL_Suffixs[1], function (result) {
                                                    trowResult(result, testName, data);
                                                    // everythings went well send callback
                                                    logout(sessionID, testName, function () {
                                                        if (result.errorMessage) {
                                                            callback(true);
                                                        }
                                                        else {
                                                            console.warn('ERROR on getUser after deletion. user still exists??: ' + userID);
                                                            callback(false);
                                                        }
                                                    });
                                                });
                                            });
                                        });
                                    }
                                    else {
                                        console.warn('update failed:' + userID);
                                    }
                                });
                            });
                        });
                    });
                });
            });
        });   
    };
    
    // test createTicket, updateTicket, getTicket, removeTicket, getTicket again too proof removal
    this.testTicketmanagement = function (initData, callback) {
        var testName = 'testTicketmanagement';
        var sessionID = '';
        var ticketID = '';
        var ticketTitleTestValue = 'ticketUpdateTest';
        var ticketProjektID = initData.ticketProjektID;
        var ticketUserID = initData.ticketUserID;
        
        login(testName, function (result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                params: {
                    ticketTitle: 'ticketTest',
                    ticketDescription: 'testDescription for ticket',
                    ticketType: 'Verbesserung',
                    ticketPriority: 1,
                    ticketDueDate: '24.06.2016',
                    ticketProjektID: ticketProjektID,
                    ticketUserID: ticketUserID
                },
                methode: 'create',
                sessionID: sessionID
            };
            sendAjax(data, URL_Suffixs[2], function (result) {
                trowResult(result, testName, data, function () {
                    ticketID = result.data.ticketID;
                    var data = {
                        params: {
                            ticketID: ticketID,
                            ticketTitle: ticketTitleTestValue
                        },
                        methode: 'update',
                        sessionID: sessionID
                    };
                    sendAjax(data, URL_Suffixs[2], function (result) {
                        trowResult(result, testName, data, function () {
                            var data = {
                                params: {
                                    ticketID: ticketID
                                },
                                methode: 'get',
                                sessionID: sessionID
                            };
                            sendAjax(data, URL_Suffixs[2], function (result) {
                                trowResult(result, testName, data, function() {
                                    if (result.data.ticketTitle == ticketTitleTestValue) {
                                        console.info('update successful: ' + ticketID);
                                        var data = {
                                            params: {
                                                ticketID: ticketID
                                            },
                                            methode: 'remove',
                                            sessionID: sessionID
                                        };
                                        sendAjax(data, URL_Suffixs[2], function (result) {
                                            trowResult(result, testName, data, function () {
                                                var data = {
                                                    params: {
                                                        ticketID: ticketID
                                                    },
                                                    methode: 'get',
                                                    sessionID: sessionID
                                                };
                                                sendAjax(data, URL_Suffixs[2], function (result) {
                                                    trowResult(result, testName, data);
                                                    // everythings went well send callback
                                                    logout(sessionID, testName, function () {
                                                        if (result.errorMessage) {
                                                            callback(true);
                                                        }
                                                        else {
                                                            console.warn('error on getTicket after deletion. ticket still exists??: ' + ticketID);
                                                            callback(false);
                                                        }
                                                    });
                                                });
                                            });
                                        });
                                    }
                                    else {
                                        console.warn('update failed:' + ticketID);
                                    }
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    
    // test createFilter, updateFilter, getFilter, removeFilter, getFilter again too proof removal
    this.testFiltermanagement = function (callback) {
        var testName = 'testFiltermanagement';
        var sessionID = '';
        var filterID = '';
        var filterTestValue = 1;
        
        login(testName, function (result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                params: {
                    filterFieldName: 'ticketPriority',
                    filterFunction: 'include',
                    filterValue: 2
                },
                methode: 'create',
                sessionID: sessionID
            };
            sendAjax(data, URL_Suffixs[4], function (result) {
                trowResult(result, testName, data, function () {
                    filterID = result.data.filterID;
                    var data = {
                        params: {
                            filterID: filterID,
                            filterValue: filterTestValue
                        },
                        methode: 'update',
                        sessionID: sessionID
                    };
                    sendAjax(data, URL_Suffixs[4], function (result) {
                        trowResult(result, testName, data, function () {
                            var data = {
                                params: {
                                    filterID: filterID
                                },
                                methode: 'get',
                                sessionID: sessionID
                            };
                            sendAjax(data, URL_Suffixs[4], function (result) {
                                trowResult(result, testName, data, function() {
                                    if (result.data.filterValue == filterTestValue) {
                                        console.info('update successful: ' + filterID);
                                        var data = {
                                            params: {
                                                filterID: filterID
                                            },
                                            methode: 'remove',
                                            sessionID: sessionID
                                        };
                                        sendAjax(data, URL_Suffixs[4], function (result) {
                                            trowResult(result, testName, data, function () {
                                                var data = {
                                                    params: {
                                                        filterID: filterID
                                                    },
                                                    methode: 'get',
                                                    sessionID: sessionID
                                                };
                                                sendAjax(data, URL_Suffixs[4], function (result) {
                                                    trowResult(result, testName, data);
                                                    logout(sessionID, testName, function () {
                                                        // everythings went well send callback
                                                        if (result.errorMessage) {
                                                            callback(true);
                                                        }
                                                        else {
                                                            console.warn('error on getFilter after deletion. filter still exists??: ' + filterID);
                                                            callback(false);
                                                        }
                                                    });
                                                });
                                            });
                                        });
                                    }
                                    else {
                                        console.warn('update failed:' + filterID);
                                    }
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    
    // test createProjekt, getProjekt, removeProjekt, getProjekt again too proof removal
    this.testProjektmanagement = function (callback) {
        var testName = 'testProjektmanagement';
        var sessionID = '';
        var projektID = '';
        var projektNameTestValue = 'projektTestName';
        
        login(testName, function (result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                params: {
                    projektName: 'projektname'
                },
                methode: 'create',
                sessionID: sessionID
            };
            sendAjax(data, URL_Suffixs[3], function (result) {
                trowResult(result, testName, data, function () {
                    // set projekt id
                    projektID = result.data.projektID;
                    var data = {
                        params: {
                            projektID: projektID
                        },
                        methode: 'get',
                        sessionID: sessionID
                    };
                    sendAjax(data, URL_Suffixs[3], function (result) {
                        trowResult(result, testName, data, function () {
                            var data = {
                                params: {
                                    projektID: projektID
                                },
                                methode: 'remove',
                                sessionID: sessionID
                            };
                            sendAjax(data, URL_Suffixs[3], function (result) {
                                trowResult(result, testName, data, function () {
                                    var data = {
                                        params: {
                                            projektID: projektID
                                        },
                                        methode: 'get',
                                        sessionID: sessionID
                                    };
                                    sendAjax(data, URL_Suffixs[3], function (result) {
                                        trowResult(result, testName, data);
                                        logout(sessionID, testName, function () {
                                            if (result.errorMessage) {
                                                callback(true);
                                            }
                                            else {
                                                console.warn('error on getProjekt after deletion. projekt still exists??: ' + projektID);
                                                callback(false);
                                            }
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    
    // find-methode with and without parameters(filtering)
    this.testFind_Tickets = function (initData, callback) {
        var testName = 'testFind_Tickets';
        var sessionID = '';
        var ticketCount = initData.ticketCount;
        var filteredTicketCount = initData.filteredTicketCount;
        var filterID = initData.filterIDTicket;
        
        login(testName, function (result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                params: {},
                methode: 'find',
                sessionID: sessionID
            };

            sendAjax(data, URL_Suffixs[2], function (result) {
                trowResult(result, testName, data);

                if (result.data.length == ticketCount) {
                    var data = {
                        params: {
                            filterID: filterID
                        },
                        methode: 'find',
                        sessionID: sessionID
                    };

                    sendAjax(data, URL_Suffixs[2], function (result) {
                        trowResult(result, testName, data);
                        logout(sessionID, testName, function () {
                            if (result.data.length == filteredTicketCount) {
                                callback(true);
                            }
                            else {
                                console.warn('ERROR ticketCount for filtered tickets: ' + filteredTicketCount + ' doesn´t match the result.data.length: ' + result.data.length + '. Make sure every entry, matched the filter criteria, is returned as expected! ', result.data);
                                callback(false);
                            }
                        });
                    });
                }
                else {
                    console.warn('ERROR ticketCount: ' + ticketCount + ' doesn´t match the result.data.length: ' + result.data.length + '. Make sure every entry is returned as expected! ', result.data);
                    callback(false);
                }
            });
        });
    };
    
    // find-methode with and without parameters(filtering)
    this.testFind_Users = function (initData, callback) {
        var testName = 'testFind_Users';
        var sessionID = '';
        var userCount = initData.userCount;
        var filteredUserCount = initData.filteredUserCount;
        var filterID = initData.filterIDUser;
        
        login(testName, function (result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                params: {},
                methode: 'find',
                sessionID: sessionID
            };

            sendAjax(data, URL_Suffixs[1], function (result) {
                trowResult(result, testName, data);

                if (result.data.length == userCount) {
                    var data = {
                        params: {
                            filterID: filterID
                        },
                        methode: 'find',
                        sessionID: sessionID
                    };

                    sendAjax(data, URL_Suffixs[1], function (result) {
                        trowResult(result, testName, data);
                        logout(sessionID, testName, function () {
                            if (result.data.length == filteredUserCount) {
                                callback(true);
                            }
                            else {
                                console.warn('ERROR userCount for filtered users: ' + filteredUserCount + ' doesn´t match the result.data.length: ' + result.data.length + '. Make sure every entry, matched the filter criteria, is returned as expected! ', result.data);
                                callback(false);
                            }
                        });
                    });
                }
                else {
                    console.warn('ERROR userCount: ' + userCount + ' doesn´t match the result.data.length: ' + result.data.length + '. Make sure every entry is returned as expected! ', result.data);
                    callback(false);
                }
            });
        });
    };
    
    // all getDataAsHTML-Methodes
    this.testHTMLData = function (callback) {
        var testName = 'testHTML-Data';
        var sessionID = '';
        
        login(testName, function (result) {
            // sessionID have to be passed in each request
            sessionID = result.data.sessionID;
            var data = {
                params: {},
                methode: 'find_html',
                sessionID: sessionID
            };

            sendAjax(data, URL_Suffixs[1], function (result) {
                trowResult(result, testName, data, function () {
                    if (/^/.test(result.data)) {
                        var data = {
                            params: {},
                            methode: 'find_html',
                            sessionID: sessionID
                        };

                        sendAjax(data, URL_Suffixs[2], function (result) {
                            trowResult(result, testName, data, function () {
                                if (/^/.test(result.data)) {
                                    var data = {
                                        params: {},
                                        methode: 'find_html',
                                        sessionID: sessionID
                                    };

                                    sendAjax(data, URL_Suffixs[2], function (result) {
                                        trowResult(result, testName, data, function () {
                                            logout(sessionID, testName, function () {
                                                if (/^/.test(result.data)) {
                                                    callback(true);
                                                }
                                                else {
                                                    console.warn('Error on find_html of filter: ', result.data);
                                                    callback(false);
                                                }
                                            });
                                        });
                                    });
                                }
                                else {
                                    console.warn('Error on find_html of ticket: ', result.data);
                                    callback(false);
                                }
                            });
                        });
                    }
                    else {
                        console.warn('Error on find_html of user: ', result.data);
                        callback(false);
                    }
                });
            });
        });
    };
    
    // is an mail send on call pwdForgotten in UserManager
    this.testPwdForgotten = function () {

    };
};
$(document).ready(function () {
    console.info('TODO List:');
    console.info('this s an easy one: include testData.js and functions.js in html instead of writing it directly in this file');
    console.info('- validate DBAccess result for too many or less objects(every validation)');
    console.info('- also test for correct remove of used sessionID');
    console.info('- sessionID is reached twice on logout');
    console.info('- function to get collection key-names');
    console.warn('- exclude function in DBAccess-Methode and validate empty params');
//    console.warn('- "find"-Methode validate empty params??');
    
    var println = function (test, result) {
        var dots = Array(30 - test.length).join('.');
        var message;
        if (result) {
            message = '<h3>Testing ' + test + dots + '<span>OK</span></h3>';
        }
        else {
            message = '<h3>Testing ' + test + dots + '<span>Fail</span></h3>';
        }
        $('#testprotokoll .testingOutput').append(message);
    };
    
    var myTestScenarios = new testScenarios();
    myTestScenarios.initTesting(function (result) {
        if (result) {
            var initData = result.data;
            myTestScenarios.testSessionverwaltung(function (result) {
                println('Sessionverwaltung', result);
                myTestScenarios.testUsermanagement(function (result) {
                    println('Usermanagement', result);
                    myTestScenarios.testTicketmanagement(initData, function (result) {
                        println('Ticketmanagement', result);
                        myTestScenarios.testFiltermanagement(function (result) {
                            println('Filtermanagement', result);
                            myTestScenarios.testProjektmanagement(function (result) {
                                println('Projektmanagement', result);
                                myTestScenarios.testFind_Tickets(initData, function (result) {
                                    println('Find_Tickets', result);                                   
                                    myTestScenarios.testFind_Users(initData, function (result) {
                                        println('Find_Users', result);
                                        myTestScenarios.testHTMLData(function (result) {
                                            println('HTML-Data', result);
                                            println('pwdForgotten', result);
                                            console.info('<====finished on: ' + new Date() + ' ====>');
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }
        else {
            console.error('Fatal ERROR result on init is undefined or null');
        }
    });
});